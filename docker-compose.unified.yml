version: '3.8'

services:
  # 后端服务
  todolist-backend:
    image: ${DOCKER_USERNAME:-kalijerry}/todolist-backend:${TAG:-dev}
    container_name: ${BACKEND_CONTAINER_NAME:-todolist-backend}
    ports:
      - "${BACKEND_PORT:-8080}:8080"
    volumes:
      - todolist_data:/app/data
      - ./backend/config/config.yaml:/app/config/config.yaml:ro
    environment:
      - GIN_MODE=${GIN_MODE:-release}
    restart: unless-stopped
    networks:
      todolist-network:
        aliases:
          - backend
          - api
          - todolist-api
          - ${BACKEND_ALIAS:-todolist-backend}
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    profiles:
      - backend
      - full

  # 前端服务
  todolist-frontend:
    image: ${DOCKER_USERNAME:-kalijerry}/todolist-frontend:${TAG:-dev}
    container_name: ${FRONTEND_CONTAINER_NAME:-todolist-frontend}
    ports:
      - "${FRONTEND_PORT:-80}:80"
    restart: unless-stopped
    networks:
      todolist-network:
        aliases:
          - frontend
          - web
          - www
          - ${FRONTEND_ALIAS:-todolist-frontend}
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    profiles:
      - frontend
      - full
    volumes:
      # 根据环境变量选择nginx配置
      - ${NGINX_CONFIG:-./frontend/nginx.auto.conf}:/etc/nginx/conf.d/default.conf:ro

  # PostgreSQL数据库
  postgres:
    image: postgres:15-alpine
    container_name: ${POSTGRES_CONTAINER_NAME:-todolist-postgres}
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-todolist}
      POSTGRES_USER: ${POSTGRES_USER:-todolist}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-password}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    restart: unless-stopped
    networks:
      todolist-network:
        aliases:
          - database
          - db
          - postgres
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-todolist}"]
      interval: 10s
      timeout: 5s
      retries: 5
    profiles:
      - postgres
      - database
      - full

  # Redis缓存
  redis:
    image: redis:7-alpine
    container_name: ${REDIS_CONTAINER_NAME:-todolist-redis}
    ports:
      - "${REDIS_PORT:-6379}:6379"
    volumes:
      - redis_data:/data
    restart: unless-stopped
    networks:
      todolist-network:
        aliases:
          - cache
          - redis
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 3
    profiles:
      - redis
      - cache
      - full

volumes:
  todolist_data:
    driver: local
  postgres_data:
    driver: local
  redis_data:
    driver: local

networks:
  todolist-network:
    driver: bridge
    name: ${NETWORK_NAME:-todolist-network}