name: Release Build

on:
  push:
    branches: [ release/v*.*.* , v*.* ]

permissions:
  contents: write
  packages: write

env:
  REGISTRY: docker.io
  IMAGE_NAME_BACKEND: kalijerry/todolist-backend
  IMAGE_NAME_FRONTEND: kalijerry/todolist-frontend

jobs:
  build-backend:
    name: Build Backend Binaries
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - goos: linux
            goarch: amd64
            suffix: linux-amd64
          - goos: windows
            goarch: amd64
            suffix: windows-amd64.exe
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.23'

      - name: Install cross-compilation dependencies
        if: matrix.goos == 'windows'
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc-mingw-w64-x86-64

      - name: Get version from branch
        id: version
        run: |
          if [[ "${{ github.ref }}" == refs/tags/* ]]; then
            # 如果是标签推送，使用标签作为版本
            VERSION=${GITHUB_REF#refs/tags/}
          else
            # 如果是分支推送，使用分支名
            BRANCH_NAME=${GITHUB_REF#refs/heads/}
            # 从分支名提取版本号（如 release/v0.1.1 -> v0.1.1）
            if [[ "$BRANCH_NAME" =~ release/v([0-9]+\.[0-9]+\.[0-9]+) ]]; then
              VERSION="v${BASH_REMATCH[1]}"
            else
              VERSION="$BRANCH_NAME"
            fi
          fi
          echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
          echo "Using version: $VERSION"

      - name: Build backend binary
        working-directory: ./backend
        env:
          GOOS: ${{ matrix.goos }}
          GOARCH: ${{ matrix.goarch }}
        run: |
          go mod download
          
          # 根据平台选择不同的构建方式
          if [ "${{ matrix.goos }}" = "windows" ]; then
            # Windows: 使用 MinGW 交叉编译
            CC=x86_64-w64-mingw32-gcc CGO_ENABLED=1 go build \
              -ldflags="-s -w -X main.version=${{ steps.version.outputs.VERSION }}" \
              -o todolist-backend-${{ steps.version.outputs.VERSION }}-${{ matrix.suffix }} \
              main.go
          else
            # Linux: 使用标准CGO
            CGO_ENABLED=1 go build \
              -ldflags="-s -w -X main.version=${{ steps.version.outputs.VERSION }}" \
              -o todolist-backend-${{ steps.version.outputs.VERSION }}-${{ matrix.suffix }} \
              main.go
          fi

      - name: Create build directory structure
        working-directory: ./backend
        run: |
          mkdir -p builds/${{ matrix.suffix }}
          cp todolist-backend-${{ steps.version.outputs.VERSION }}-${{ matrix.suffix }} builds/${{ matrix.suffix }}/
          cp -r config builds/${{ matrix.suffix }}/
          if [ "${{ matrix.goos }}" = "windows" ]; then
            cat > builds/${{ matrix.suffix }}/start.bat << 'EOF'
          @echo off
          echo Starting ToDoList Backend Server...
          todolist-backend-${{ steps.version.outputs.VERSION }}-${{ matrix.suffix }}
          pause
          EOF
          else
            cat > builds/${{ matrix.suffix }}/start.sh << 'EOF'
          #!/bin/bash
          echo "Starting ToDoList Backend Server..."
          chmod +x todolist-backend-${{ steps.version.outputs.VERSION }}-${{ matrix.suffix }}
          ./todolist-backend-${{ steps.version.outputs.VERSION }}-${{ matrix.suffix }}
          EOF
            chmod +x builds/${{ matrix.suffix }}/start.sh
          fi

      - name: Upload backend artifacts
        uses: actions/upload-artifact@v4
        with:
          name: backend-${{ matrix.suffix }}
          path: backend/builds/${{ matrix.suffix }}/

  build-docker-images:
    environment: Docker
    name: Build and Push Docker Images
    runs-on: ubuntu-latest
    needs: build-backend
    permissions:
      contents: read
      packages: write
    outputs:
      backend-tags: ${{ steps.backend-meta.outputs.tags }}
      backend-digest: ${{ steps.backend-build.outputs.digest }}
      frontend-tags: ${{ steps.frontend-meta.outputs.tags }}
      frontend-digest: ${{ steps.frontend-build.outputs.digest }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
          
      - name: Get version from tag
        id: version
        run: echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT

      - name: Extract metadata for backend image
        id: backend-meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_BACKEND }}
          tags: |
            type=ref,event=branch
            type=ref,event=tag
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=raw,value=latest

      - name: Build and push backend image
        id: backend-build
        uses: docker/build-push-action@v6
        with:
          context: ./backend
          file: ./backend/Dockerfile.backend
          push: true
          tags: ${{ steps.backend-meta.outputs.tags }}
          labels: ${{ steps.backend-meta.outputs.labels }}
          platforms: linux/amd64,linux/arm64
          cache-from: type=gha,scope=backend
          cache-to: type=gha,mode=max,scope=backend

      - name: Extract metadata for frontend image
        id: frontend-meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_FRONTEND }}
          tags: |
            type=ref,event=branch
            type=ref,event=tag
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=raw,value=latest

      - name: Build and push frontend image
        id: frontend-build
        uses: docker/build-push-action@v6
        with:
          context: ./frontend
          file: ./frontend/Dockerfile
          push: true
          tags: ${{ steps.frontend-meta.outputs.tags }}
          labels: ${{ steps.frontend-meta.outputs.labels }}
          platforms: linux/amd64,linux/arm64
          cache-from: type=gha,scope=frontend
          cache-to: type=gha,mode=max,scope=frontend

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: build-docker-images
    if: always()
    permissions:
      security-events: write
      contents: read
    
    steps:
    - name: Set image tag for scanning
      id: tag
      run: |
        # 对于分支推送，使用分支名作为标签，但替换特殊字符
        BRANCH_NAME=${GITHUB_REF#refs/heads/}
        SAFE_TAG=$(echo "$BRANCH_NAME" | sed 's/[^a-zA-Z0-9._-]/-/g')
        echo "tag=${SAFE_TAG}" >> $GITHUB_OUTPUT
        echo "Using tag: ${SAFE_TAG}"

    - name: Run Trivy vulnerability scanner - Backend
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_BACKEND }}:${{ steps.tag.outputs.tag }}
        format: 'sarif'
        output: 'trivy-backend-results.sarif'
        severity: 'CRITICAL,HIGH,MEDIUM'
        exit-code: '0'

    - name: Run Trivy vulnerability scanner - Frontend  
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_FRONTEND }}:${{ steps.tag.outputs.tag }}
        format: 'sarif'
        output: 'trivy-frontend-results.sarif'
        severity: 'CRITICAL,HIGH,MEDIUM'
        exit-code: '0'

    - name: Upload Trivy scan results to GitHub Security tab - Backend
      uses: github/codeql-action/upload-sarif@v3
      if: always() && hashFiles('trivy-backend-results.sarif') != ''
      with:
        sarif_file: 'trivy-backend-results.sarif'
        category: 'backend-security'

    - name: Upload Trivy scan results to GitHub Security tab - Frontend
      uses: github/codeql-action/upload-sarif@v3
      if: always() && hashFiles('trivy-frontend-results.sarif') != ''
      with:
        sarif_file: 'trivy-frontend-results.sarif'
        category: 'frontend-security'

    - name: Show Trivy results summary
      if: always()
      run: |
        echo "## Security Scan Results" >> $GITHUB_STEP_SUMMARY
        if [ -f "trivy-backend-results.sarif" ]; then
          echo "✅ Backend scan completed" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ Backend scan failed" >> $GITHUB_STEP_SUMMARY
        fi
        if [ -f "trivy-frontend-results.sarif" ]; then
          echo "✅ Frontend scan completed" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ Frontend scan failed" >> $GITHUB_STEP_SUMMARY
        fi

  create-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [build-backend, build-docker-images]
    if: always() && (needs.build-backend.result == 'success')
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Get version from branch
        id: version
        run: |
          if [[ "${{ github.ref }}" == refs/tags/* ]]; then
            # 如果是标签推送，使用标签作为版本
            VERSION=${GITHUB_REF#refs/tags/}
          else
            # 如果是分支推送，使用分支名
            BRANCH_NAME=${GITHUB_REF#refs/heads/}
            # 从分支名提取版本号（如 release/v0.1.1 -> v0.1.1）
            if [[ "$BRANCH_NAME" =~ release/v([0-9]+\.[0-9]+\.[0-9]+) ]]; then
              VERSION="v${BASH_REMATCH[1]}"
            else
              VERSION="$BRANCH_NAME"
            fi
          fi
          echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
          echo "Using version: $VERSION"

      - name: Download backend artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: backend-*
          path: ./artifacts

      - name: Create release archives
        run: |
          cd artifacts
          
          # 创建 Linux 版本压缩包
          cd backend-linux-amd64
          tar -czf ../todolist-backend-${{ steps.version.outputs.VERSION }}-linux-amd64.tar.gz *
          cd ..
          
          # 创建 Windows 版本压缩包
          cd backend-windows-amd64.exe
          zip -r ../todolist-backend-${{ steps.version.outputs.VERSION }}-windows-amd64.zip *
          cd ..

      - name: Generate changelog
        id: changelog
        run: |
          if [ -f CHANGELOG.md ]; then
            # 如果有 CHANGELOG.md，提取当前版本的更改
            awk '/^## \[${{ steps.version.outputs.VERSION }}\]/{flag=1;next}/^## \[/{flag=0}flag' CHANGELOG.md > release_notes.md
          else
            # 生成简单的发布说明
            cat > release_notes.md << EOF
          ## 🚀 ToDoList ${{ steps.version.outputs.VERSION }}
          
          ### 📦 包含内容
          - 后端服务器 (Linux x64 / Windows x64)
          - Docker镜像 (多架构支持)
          - 完整的配置文件和启动脚本
          
          ### 🐳 Docker 部署
          \`\`\`bash
          # 更新 docker-compose.prod.yml 中的镜像版本
          sed -i 's/:latest/:${{ steps.version.outputs.VERSION }}/g' docker-compose.prod.yml
          
          # 启动服务
          docker compose -f docker-compose.prod.yml up -d
          \`\`\`
          
          ### 📁 二进制部署
          1. 下载对应平台的压缩包
          2. 解压到目标目录
          3. 修改 config/config.yaml 配置
          4. 运行启动脚本
          
          ### 🔧 技术栈
          - **后端**: Go 1.21, Gin, GORM
          - **前端**: Vue 3, Element Plus, Vite
          - **数据库**: SQLite / PostgreSQL
          - **部署**: Docker, Nginx
          EOF
          fi

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.version.outputs.VERSION }}
          name: ToDoList ${{ steps.version.outputs.VERSION }}
          body_path: release_notes.md
          draft: false
          prerelease: false
          files: |
            artifacts/todolist-backend-${{ steps.version.outputs.VERSION }}-linux-amd64.tar.gz
            artifacts/todolist-backend-${{ steps.version.outputs.VERSION }}-windows-amd64.zip
            docker-compose.prod.yml
            .env.example
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Update Docker Compose for release
        run: |
          # 创建发布版本的 docker-compose 文件
          sed 's/:dev/:${{ steps.version.outputs.VERSION }}/g' docker-compose.prod.yml > docker-compose-${{ steps.version.outputs.VERSION }}.yml
          
          # 上传到 release
          gh release upload ${{ steps.version.outputs.VERSION }} docker-compose-${{ steps.version.outputs.VERSION }}.yml
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}