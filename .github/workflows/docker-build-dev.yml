name: Build and Push Docker Images

on:
  push:
    branches: [ dev ]


env:
  # 使用你的Docker Hub用户名
  REGISTRY: docker.io
  IMAGE_NAME_BACKEND: kalijerry/todolist-backend
  IMAGE_NAME_FRONTEND: kalijerry/todolist-frontend

jobs:
  build-backend:
    runs-on: ubuntu-latest
    # 只在 main 和 dev 分支上运行
    if: github.ref_name == 'dev' 
    environment: Docker
    permissions:
      contents: read
      packages: write
    outputs:
      backend-tags: ${{ steps.meta.outputs.tags }}
      backend-digest: ${{ steps.build.outputs.digest }}

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Docker Hub
      if: github.event_name != 'pull_request'
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Extract metadata (tags, labels) for Docker
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_BACKEND }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=sha,prefix=commit-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push Docker image
      id: build
      uses: docker/build-push-action@v6
      with:
        context: ./backend
        file: ./backend/Dockerfile
        push: ${{ github.event_name != 'pull_request' }}
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        outputs: ${{ github.event_name == 'pull_request' && 'type=oci,dest=/tmp/backend-image.tar' || '' }}

  build-frontend:
    runs-on: ubuntu-latest
    # 只在 main 和 dev 分支上运行
    if: github.ref_name == 'dev'
    environment: Docker
    permissions:
      contents: read
      packages: write
    outputs:
      frontend-tags: ${{ steps.meta.outputs.tags }}
      frontend-digest: ${{ steps.build.outputs.digest }}

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Docker Hub
      if: github.event_name != 'pull_request'
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Extract metadata (tags, labels) for Docker
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_FRONTEND }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=sha,prefix=commit-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push Docker image
      id: build
      uses: docker/build-push-action@v6
      with:
        context: ./frontend
        file: ./frontend/Dockerfile
        push: ${{ github.event_name != 'pull_request' }}
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        outputs: ${{ github.event_name == 'pull_request' && 'type=oci,dest=/tmp/frontend-image.tar' || '' }}

  security-scan:
    runs-on: ubuntu-latest
    needs: [build-backend, build-frontend]
    # 只在非PR且在允许的分支上运行
    if: github.event_name != 'pull_request' && (github.ref_name == 'dev')
    permissions:
      security-events: write
      actions: read
      contents: read
    
    steps:
    - name: Set image tags
      id: tags
      run: |
        if [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
          echo "backend_tag=latest" >> $GITHUB_OUTPUT
          echo "frontend_tag=latest" >> $GITHUB_OUTPUT
        else
          branch_name=${GITHUB_REF#refs/heads/}
          echo "backend_tag=${branch_name}" >> $GITHUB_OUTPUT
          echo "frontend_tag=${branch_name}" >> $GITHUB_OUTPUT
        fi

    - name: Run Trivy vulnerability scanner - Backend
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_BACKEND }}:${{ steps.tags.outputs.backend_tag }}
        format: 'sarif'
        output: 'trivy-backend-results.sarif'
        severity: 'CRITICAL,HIGH,MEDIUM'
        exit-code: '0'

    - name: Run Trivy vulnerability scanner - Frontend  
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_FRONTEND }}:${{ steps.tags.outputs.frontend_tag }}
        format: 'sarif'
        output: 'trivy-frontend-results.sarif'
        severity: 'CRITICAL,HIGH,MEDIUM'
        exit-code: '0'

    - name: Upload Trivy scan results to GitHub Security tab - Backend
      uses: github/codeql-action/upload-sarif@v3
      if: always() && hashFiles('trivy-backend-results.sarif') != ''
      with:
        sarif_file: 'trivy-backend-results.sarif'
        category: 'backend-security'

    - name: Upload Trivy scan results to GitHub Security tab - Frontend
      uses: github/codeql-action/upload-sarif@v3
      if: always() && hashFiles('trivy-frontend-results.sarif') != ''
      with:
        sarif_file: 'trivy-frontend-results.sarif'
        category: 'frontend-security'

    - name: Show Trivy results summary
      if: always()
      run: |
        echo "## Security Scan Results" >> $GITHUB_STEP_SUMMARY
        if [ -f "trivy-backend-results.sarif" ]; then
          echo "✅ Backend scan completed" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ Backend scan failed" >> $GITHUB_STEP_SUMMARY
        fi
        if [ -f "trivy-frontend-results.sarif" ]; then
          echo "✅ Frontend scan completed" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ Frontend scan failed" >> $GITHUB_STEP_SUMMARY
        fi
